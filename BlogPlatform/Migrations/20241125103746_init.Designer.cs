// <auto-generated />
using System;
using BlogPlatform.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogPlatform.Migrations
{
    [DbContext(typeof(BlogPlatformContext))]
    [Migration("20241125103746_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlogPlatform.Models.Blogger", b =>
                {
                    b.Property<int>("BloggerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloggerID"), 1L, 1);

                    b.Property<string>("bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("BloggerID");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Bloggers");
                });

            modelBuilder.Entity("BlogPlatform.Models.BlogPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"), 1L, 1);

                    b.Property<int>("BloggerID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("BloggerID");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("BlogPlatform.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ReaderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestampt")
                        .HasColumnType("datetime2");

                    b.Property<int>("blogPostPostId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("ReaderID");

                    b.HasIndex("blogPostPostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("BlogPlatform.Models.Reader", b =>
                {
                    b.Property<int>("ReaderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReaderID"), 1L, 1);

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("ReaderID");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("BlogPlatform.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"), 1L, 1);

                    b.Property<byte[]>("HashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BlogPlatform.Models.Blogger", b =>
                {
                    b.HasOne("BlogPlatform.Models.User", "User")
                        .WithOne("Blogger")
                        .HasForeignKey("BlogPlatform.Models.Blogger", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogPlatform.Models.BlogPost", b =>
                {
                    b.HasOne("BlogPlatform.Models.Blogger", "Blogger")
                        .WithMany("blogPosts")
                        .HasForeignKey("BloggerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blogger");
                });

            modelBuilder.Entity("BlogPlatform.Models.Comment", b =>
                {
                    b.HasOne("BlogPlatform.Models.Reader", "Reader")
                        .WithMany("Comments")
                        .HasForeignKey("ReaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogPlatform.Models.BlogPost", "blogPost")
                        .WithMany("Comments")
                        .HasForeignKey("blogPostPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reader");

                    b.Navigation("blogPost");
                });

            modelBuilder.Entity("BlogPlatform.Models.Reader", b =>
                {
                    b.HasOne("BlogPlatform.Models.User", "user")
                        .WithOne("Reader")
                        .HasForeignKey("BlogPlatform.Models.Reader", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("BlogPlatform.Models.Blogger", b =>
                {
                    b.Navigation("blogPosts");
                });

            modelBuilder.Entity("BlogPlatform.Models.BlogPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BlogPlatform.Models.Reader", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BlogPlatform.Models.User", b =>
                {
                    b.Navigation("Blogger")
                        .IsRequired();

                    b.Navigation("Reader")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
